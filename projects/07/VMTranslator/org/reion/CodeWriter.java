package org.reion;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

/**
 * 将VM命令翻译成Hack汇编代码
 * 
 * @author Reion
 */
public class CodeWriter {

	// 翻译后汇编文件后缀名
	public static final String DEST_FIX = ".asm";
	// VM虚拟机语言源文件后缀名
	public static final String SOURCE_FIX = ".vm";
	// Stack pointer
	public static final String SP = "SP";
	// Local segment pointer
	public static final String SEGMENT_LCL = "LCL";
	// Argument segment pointer
	public static final String SEGMENT_ARG = "ARG";
	// This segment pointer
	public static final String SEGMENT_THIS = "THIS";
	// That segment pointer
	public static final String SEGMENT_THAT = "THAT";
	// 换行符
	public static final String LINE_SEPARATOR = System
			.getProperty("line.separator");
	// 标签格式模板1
	public static final String LABEL_PATTEN1 = "{0}.{1}";
	// 标签格式模板2
	public static final String LABEL_PATTEN2 = "{0}.{1}.{2}";
	// L指令开始标签
	public static final String L_BEGIN_TAG = "(";
	// L指令结束标签
	public static final String L_END_TAG = ")";
	// A指令标签
	public static final String A_TAG = "@";
	// 注释标签
	public static final String COMMENT_TAG = "//";

	// 文件路径
	private String filePath = null;
	// 输出的ASM文件名
	private String asmName = null;
	// 文件写入器
	private FileWriter fWriter = null;
	// 标签区别序列
	private static int seq = -1;

	/**
	 * 设置汇编文件的名称
	 * 
	 * @param asmStr
	 *            汇编文件名
	 */
	public void setAsmName(final String asmStr) {
		this.asmName = asmStr;
	}

	/**
	 * 设置汇编文件路径
	 * 
	 * @param filePath
	 *            汇编文件路径
	 */
	public void setFilePath(final String filePath) {
		this.filePath = filePath.endsWith(File.separator) ? filePath : filePath
				+ File.separator;

	}

	/**
	 * 通知代码写入程序，新的VM文件翻译过程已经开始
	 * 
	 * @param filename
	 *            VM文件名
	 */
	public void setFileName(final String filename) {
		String asmFileStr = (asmName == null) ? filename : asmName;
		if (fWriter == null) {
			try {
				File f = new File(filePath + asmFileStr + DEST_FIX);
				if (f.exists()) {
					f.delete();
				}
				fWriter = new FileWriter(f);
				writeComment("	******* HACK ASM FILE GENERATED BY VM COMPILER *******");
				writeComment("	VM  FILE: " + asmFileStr + SOURCE_FIX);
				writeComment("	COMPILER: JAVA_HACK_VM_COMPILER");
				writeComment("	GEN TIME: "
						+ SimpleDateFormat.getInstance().format(new Date())
						+ LINE_SEPARATOR + LINE_SEPARATOR);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 向汇编代码写入注释.
	 * 
	 * @param contant
	 *            注释内容
	 */
	public void writeComment(final String contant) {
		try {
			fWriter.write(COMMENT_TAG + " " + contant + LINE_SEPARATOR);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 将给定的算术操作所对应的汇编代码写至输出
	 * 
	 * @param command
	 *            VM命令字符串
	 */
	public void writeArithmetic(final String command) {

		StringBuffer strB = new StringBuffer();
		String lab1, lab2, lab3, result;

		if ("add".equalsIgnoreCase(command) || "sub".equalsIgnoreCase(command)
				|| "and".equalsIgnoreCase(command)
				|| "or".equalsIgnoreCase(command)) {
			strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
					.append("AM=M-1").append(LINE_SEPARATOR).append("D=M")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("AM=M-1")
					.append(LINE_SEPARATOR).append("[wildcard]")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("M=M+1")
					.append(LINE_SEPARATOR);
			result = strB.toString();
		} else if ("eq".equalsIgnoreCase(command)
				|| "gt".equalsIgnoreCase(command)
				|| "lt".equalsIgnoreCase(command)) {

			++seq;
			lab1 = MessageFormat.format(LABEL_PATTEN2, new Object[] { "COMP",
					seq, "TRUE" });
			lab2 = MessageFormat.format(LABEL_PATTEN2, new Object[] { "COMP",
					seq, "FALSE" });
			lab3 = MessageFormat.format(LABEL_PATTEN2, new Object[] { "COMP",
					seq, "END" });

			strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
					.append("AM=M-1").append(LINE_SEPARATOR).append("D=M")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("AM=M-1")
					.append(LINE_SEPARATOR).append("D=M-D")
					.append(LINE_SEPARATOR).append(A_TAG).append(lab1)
					.append(LINE_SEPARATOR).append("[wildcard]")
					.append(LINE_SEPARATOR).append(A_TAG).append(lab2)
					.append(LINE_SEPARATOR).append("0;JMP")
					.append(LINE_SEPARATOR).append(L_BEGIN_TAG).append(lab1)
					.append(L_END_TAG).append(LINE_SEPARATOR).append(A_TAG)
					.append(SP).append(LINE_SEPARATOR).append("A=M")
					.append(LINE_SEPARATOR).append("M=-1")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("M=M+1")
					.append(LINE_SEPARATOR).append(A_TAG).append(lab3)
					.append(LINE_SEPARATOR).append("0;JMP")
					.append(LINE_SEPARATOR).append(L_BEGIN_TAG).append(lab2)
					.append(L_END_TAG).append(LINE_SEPARATOR).append(A_TAG)
					.append(SP).append(LINE_SEPARATOR).append("A=M")
					.append(LINE_SEPARATOR).append("M=0")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("M=M+1")
					.append(LINE_SEPARATOR).append(L_BEGIN_TAG).append(lab3)
					.append(L_END_TAG).append(LINE_SEPARATOR);
		} else if ("neg".equalsIgnoreCase(command)
				|| "not".equalsIgnoreCase(command)) {
			strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
					.append("AM=M-1").append(LINE_SEPARATOR).append("[wildcard]")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("M=M+1")
					.append(LINE_SEPARATOR);

		}
		result = strB.toString();

		// { "add", "sub", "neg", "eq", "gt", "lt", "and", "or", "not" }
		switch (Arrays.asList(Parser.SET_ARI_LOG).indexOf(command)) {
		case 0:
			result = result.replace("[wildcard]", "M=D+M");
			break;
		case 1:
			result = result.replace("[wildcard]", "M=M-D");
			break;
		case 2:
			result = result.replace("[wildcard]", "M=-M");
			break;
		case 3:
			result = result.replace("[wildcard]", "D;JEQ");
			break;
		case 4:
			result = result.replace("[wildcard]", "D;JGT");
			break;
		case 5:
			result = result.replace("[wildcard]", "D;JLT");
			break;
		case 6:
			result = result.replace("[wildcard]", "M=D&M");
			break;
		case 7:
			result = result.replace("[wildcard]", "M=D|M");
			break;
		default:
			result = result.replace("[wildcard]", "M=!M");
			break;
		}

		try {
			fWriter.write(result);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 将给定的栈操作对应的汇编代码写至输出
	 * 
	 * @param command
	 * @param segment
	 * @param index
	 */
	public void writePushPop(final String command, final String segment,
			final int index) {
		StringBuffer strB = new StringBuffer();
		String lab1, lab2;

		if (Parser.SET_PUSH.equalsIgnoreCase(command)) {
			if (segment.equalsIgnoreCase("constant")) {
				strB.append(A_TAG).append(index).append(LINE_SEPARATOR)
						.append("D=A").append(LINE_SEPARATOR).append(A_TAG)
						.append(SP).append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(SP)
						.append(LINE_SEPARATOR).append("M=M+1")
						.append(LINE_SEPARATOR);
			}

			if (segment.equalsIgnoreCase("local")
					|| segment.equalsIgnoreCase("argument")
					|| segment.equalsIgnoreCase("this")
					|| segment.equalsIgnoreCase("that")) {

				String seg, lab;
				if (segment.equalsIgnoreCase("local")) {
					seg = SEGMENT_LCL;
					lab = "PUSH_LCL";
				} else if (segment.equalsIgnoreCase("argument")) {
					seg = SEGMENT_ARG;
					lab = "PUSH_ARG";
				} else if (segment.equalsIgnoreCase("this")) {
					seg = SEGMENT_THIS;
					lab = "PUSH_THIS";
				} else {
					seg = SEGMENT_THAT;
					lab = "PUSH_THAT";
				}

				++seq;
				lab1 = MessageFormat.format(LABEL_PATTEN2, new Object[] { lab,
						seq, "LOOP" });
				lab2 = MessageFormat.format(LABEL_PATTEN2, new Object[] { lab,
						seq, "END" });

				strB.append(A_TAG).append(seg).append(LINE_SEPARATOR)
						.append("D=M").append(LINE_SEPARATOR).append(A_TAG)
						.append("R13").append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(index)
						.append(LINE_SEPARATOR).append("D=A")
						.append(LINE_SEPARATOR).append(L_BEGIN_TAG)
						.append(lab1).append(L_END_TAG).append(LINE_SEPARATOR)
						.append("D=D-1").append(LINE_SEPARATOR).append(A_TAG)
						.append(lab2).append(LINE_SEPARATOR).append("D;JLT")
						.append(LINE_SEPARATOR).append(A_TAG).append("R13")
						.append(LINE_SEPARATOR).append("M=M+1")
						.append(LINE_SEPARATOR).append(A_TAG).append(lab1)
						.append(LINE_SEPARATOR).append("D;JGE")
						.append(LINE_SEPARATOR).append(L_BEGIN_TAG)
						.append(lab2).append(L_END_TAG).append(LINE_SEPARATOR)
						.append(A_TAG).append("R13").append(LINE_SEPARATOR)
						.append("A=M").append(LINE_SEPARATOR).append("D=M")
						.append(LINE_SEPARATOR).append(A_TAG).append(SP)
						.append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(SP)
						.append(LINE_SEPARATOR).append("M=M+1")
						.append(LINE_SEPARATOR);

			}

			if (segment.equalsIgnoreCase("temp")
					|| segment.equalsIgnoreCase("pointer")
					|| segment.equalsIgnoreCase("static")) {
				int base = 5;
				if (segment.equalsIgnoreCase("pointer")) {
					base = 3;
				} else if (segment.equalsIgnoreCase("static")) {
					base = 16;
				}

				strB.append(A_TAG).append("R" + (base + index))
						.append(LINE_SEPARATOR).append("D=M")
						.append(LINE_SEPARATOR).append(A_TAG).append(SP)
						.append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(SP)
						.append(LINE_SEPARATOR).append("M=M+1")
						.append(LINE_SEPARATOR);
			}
		}

		if (Parser.SET_POP.equalsIgnoreCase(command)) {
			if (segment.equalsIgnoreCase("local")
					|| segment.equalsIgnoreCase("argument")
					|| segment.equalsIgnoreCase("this")
					|| segment.equalsIgnoreCase("that")) {

				String seg, lab;
				if (segment.equalsIgnoreCase("local")) {
					seg = SEGMENT_LCL;
					lab = "POP_LCL";
				} else if (segment.equalsIgnoreCase("argument")) {
					seg = SEGMENT_ARG;
					lab = "POP_ARG";
				} else if (segment.equalsIgnoreCase("this")) {
					seg = SEGMENT_THIS;
					lab = "POP_THIS";
				} else {
					seg = SEGMENT_THAT;
					lab = "POP_THAT";
				}
				++seq;
				lab1 = MessageFormat.format(LABEL_PATTEN2, new Object[] { lab,
						seq, "LOOP" });
				lab2 = MessageFormat.format(LABEL_PATTEN2, new Object[] { lab,
						seq, "END" });

				strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
						.append("AM=M-1").append(LINE_SEPARATOR).append("D=M")
						.append(LINE_SEPARATOR).append(A_TAG).append("R13")
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(seg)
						.append(LINE_SEPARATOR).append("D=M")
						.append(LINE_SEPARATOR).append(A_TAG).append("R14")
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(index)
						.append(LINE_SEPARATOR).append("D=A")
						.append(LINE_SEPARATOR).append(A_TAG).append(seg)
						.append(LINE_SEPARATOR).append(L_BEGIN_TAG)
						.append(lab1).append(L_END_TAG).append(LINE_SEPARATOR)
						.append("D=D-1").append(LINE_SEPARATOR).append(A_TAG)
						.append(lab2).append(LINE_SEPARATOR).append("D;JLT")
						.append(LINE_SEPARATOR).append(A_TAG).append("R14")
						.append(LINE_SEPARATOR).append("M=M+1")
						.append(LINE_SEPARATOR).append(A_TAG).append(lab1)
						.append(LINE_SEPARATOR).append("D;JGE")
						.append(LINE_SEPARATOR).append(L_BEGIN_TAG)
						.append(lab2).append(L_END_TAG).append(LINE_SEPARATOR)
						.append(A_TAG).append("R13").append(LINE_SEPARATOR)
						.append("D=M").append(LINE_SEPARATOR).append(A_TAG)
						.append("R14").append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR);
			}

			if (segment.equalsIgnoreCase("temp")
					|| segment.equalsIgnoreCase("pointer")
					|| segment.equalsIgnoreCase("static")) {
				int base = 5;
				if (segment.equalsIgnoreCase("pointer")) {
					base = 3;
				} else if (segment.equalsIgnoreCase("static")) {
					base = 16;
				}

				strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
						.append("AM=M-1").append(LINE_SEPARATOR).append("D=M")
						.append(LINE_SEPARATOR).append(A_TAG)
						.append("R" + (base + index)).append(LINE_SEPARATOR)
						.append("M=D").append(LINE_SEPARATOR);
			}
		}
		try {
			fWriter.write(strB.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 关闭输出文件
	 */
	public void close() {
		if (fWriter != null) {
			try {
				fWriter.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
